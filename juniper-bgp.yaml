zabbix_export:
  version: '5.2'
  date: '2021-04-28T00:42:50Z'
  groups:
    -
      name: 'Templates/Network devices'
  templates:
    -
      template: 'Juniper BGP'
      name: 'Juniper BGP'
      groups:
        -
          name: 'Templates/Network devices'
      applications:
        -
          name: BGP
      discovery_rules:
        -
          name: 'BGP peer discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#BGPPEERINDEX},.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.14,{#BGPPEERREMOTEADDRESS},1.3.6.1.4.1.2636.5.1.1.2.1.1.1.11, {#BGPEERREMOTEAS},.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.13]'
          key: net.bgp.peer.discovery
          delay: 10m
          item_prototypes:
            -
              name: 'Last received error ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.5.{#SNMPINDEX}'
              key: 'net.bgp.peer.error.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: BGP
            -
              name: 'Last sent error ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.6.{#SNMPINDEX}'
              key: 'net.bgp.peer.error.sent[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes accepted ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.8.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.accepted[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes advertised ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.6.2.1.10.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.advertised[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes received ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.7.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes rejected ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.9.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.rejected[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes accepted ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.8.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.accepted[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes advertised ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.6.2.1.10.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.advertised[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes received ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.7.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes rejected ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.9.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.rejected[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'Peer state ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.2.{#SNMPINDEX}'
              key: 'net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              applications:
                -
                  name: BGP
              valuemap:
                name: BgpPeerState
            -
              name: 'Administrative status ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.3.{#SNMPINDEX}'
              key: 'net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              applications:
                -
                  name: BGP
              valuemap:
                name: BgpPeerAdminStatus
            -
              name: 'Established time ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.4.1.1.1.{#SNMPINDEX}'
              key: 'net.bgp.peer.uptime[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              units: s
              applications:
                -
                  name: BGP
          trigger_prototypes:
            -
              expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=6 and {Juniper BGP:net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}<0.8*{Juniper BGP:net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].avg(1d)}'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) has lost more than 20% of received prefixes'
              priority: WARNING
              dependencies:
                -
                  name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
                  expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last(#3)}<>6 and {Juniper BGP:net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=2'
            -
              expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last(#3)}<>6 and {Juniper BGP:net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=2'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
              priority: HIGH
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  json = JSON.parse(value);
                  
                  json.forEach(function (item, index, array) {
                      var ip = item["{#BGPPEERREMOTEADDRESS}"];
                  
                      parts = ip.trim().split(' ');
                  
                      if (parts.length === 4) {
                          for (var i = 0; i < parts.length; ++i) {
                              parts[i] = parseInt(parts[i], 16);
                          }
                  
                          ip = parts.join('.');
                      } else if (parts.length == 16) {
                          // IPv6
                  
                          // convert to colon-separated lower case 16-bit hexadecimal fields with leading zeroes stripped
                          ip = parts
                              .join('')
                              .match(/.{1,4}/g)
                              .map(function(word) {
                                // RFC 5952: 4.1. Leading zeros MUST be suppressed. A single 16-bit 0000 field MUST be represented as 0.
                                word = word.replace(/^0+/, '');
                                if (word.length === 0) {
                                  word = "0"
                                }
                                return word
                              })
                              .join(':')
                              // RFC 5952: 4.3. The characters "a", "b", "c", "d", "e", and "f" in an IPv6 address MUST be represented in lowercase.
                              .toLowerCase()
                  
                          // add a temporary terminator to each end of the string to aid matching consecutive 16-bit 0 fields
                          ip = '<' + ip + '>'
                  
                          // RFC 5952:
                          //   4.2.1. The use of the symbol "::" MUST be used to its maximum capability.
                          //   4.2.2. The symbol "::" MUST NOT be used to shorten just one 16-bit 0 field.
                          //   4.2.3.  The longest, left-most run of consecutive 16-bit 0 fields MUST be shortened
                          for (i = 8; i > 1; i--) {
                              r1 = new RegExp("[:<>](?:0[:<>]){" + i + "}")
                              if (m = ip.match(r1)) {
                                  ip = ip.replace(r1, '::')
                                  break
                              }
                          }
                  
                          // remove any remaining temporary terminators
                          ip = ip.replace(/^[<]?([^>]+)[>]?$/, function (match, p1) { return p1; })
                      }
                  
                      array[index]["{#BGPPEERREMOTEADDRESS}"] = ip;
                  });
                  
                  return JSON.stringify(json);
  value_maps:
    -
      name: BgpPeerAdminStatus
      mappings:
        -
          value: '1'
          newvalue: stop
        -
          value: '2'
          newvalue: start
    -
      name: BgpPeerState
      mappings:
        -
          value: '1'
          newvalue: idle
        -
          value: '2'
          newvalue: connect
        -
          value: '3'
          newvalue: active
        -
          value: '4'
          newvalue: opensent
        -
          value: '5'
          newvalue: openconfirm
        -
          value: '6'
          newvalue: established
